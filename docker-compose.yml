version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: atomic-attendance-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: atomic_attendance
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - attendance-network
    command: mongod --auth

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: atomic-attendance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - attendance-network
    command: redis-server --appendonly yes --requirepass redispassword

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: atomic-attendance-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://attendance_user:attendance_password@mongodb:27017/atomic_attendance
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword
      - JWT_SECRET=your-production-jwt-secret
      - PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - attendance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/system/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_BASE_URL=http://localhost:5000/api/v1
        - REACT_APP_WEBSOCKET_URL=http://localhost:5000
    container_name: atomic-attendance-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - attendance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: atomic-attendance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - attendance-network

  # Biometric Service (Microservice)
  biometric-service:
    build:
      context: ./services/biometric
      dockerfile: Dockerfile
    container_name: atomic-attendance-biometric
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword
    ports:
      - "8080:8080"
    volumes:
      - ./services/biometric/templates:/app/templates
    depends_on:
      - redis
    networks:
      - attendance-network

  # QR Code Service (Microservice)
  qr-service:
    build:
      context: ./services/qr-code
      dockerfile: Dockerfile
    container_name: atomic-attendance-qr
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - attendance-network

  # Blockchain Service (Hyperledger Fabric)
  blockchain-service:
    build:
      context: ./services/blockchain
      dockerfile: Dockerfile
    container_name: atomic-attendance-blockchain
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - FABRIC_NETWORK=attendance-network
    ports:
      - "8082:8082"
    volumes:
      - ./blockchain/crypto-config:/app/crypto-config:ro
      - ./blockchain/channel-artifacts:/app/channel-artifacts:ro
    networks:
      - attendance-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: atomic-attendance-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - attendance-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: atomic-attendance-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - attendance-network

  # Log Management - ELK Stack (Elasticsearch)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: atomic-attendance-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - attendance-network

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: atomic-attendance-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - attendance-network

  # Log Management - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: atomic-attendance-logstash
    restart: unless-stopped
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./backend/logs:/var/log/app:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - attendance-network

  # Message Queue - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: atomic-attendance-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - attendance-network

  # Background Jobs Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: atomic-attendance-worker
    restart: unless-stopped
    command: npm run worker
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://attendance_user:attendance_password@mongodb:27017/atomic_attendance
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    networks:
      - attendance-network

  # Backup Service
  backup:
    image: mongo:6.0
    container_name: atomic-attendance-backup
    restart: unless-stopped
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      bash -c "
        while true; do
          sleep 86400 # 24 hours
          /backup.sh
        done
      "
    depends_on:
      - mongodb
    networks:
      - attendance-network

networks:
  attendance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  rabbitmq_data:
    driver: local